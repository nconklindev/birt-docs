"use strict";(self.webpackChunkbirt_docs=self.webpackChunkbirt_docs||[]).push([[2025],{2120:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>u,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"birt-studio/advanced/computed-columns","title":"Creating Computed Columns","description":"How to create computed columns in BIRT Studio using the custom functions provided.","source":"@site/docs/birt-studio/03-advanced/computed-columns.mdx","sourceDirName":"birt-studio/03-advanced","slug":"/birt-studio/advanced/computed-columns","permalink":"/birt-docs/docs/birt-studio/advanced/computed-columns","draft":false,"unlisted":false,"editUrl":"https://github.com/nconklindev/birt-docs/edit/main/docs/birt-studio/03-advanced/computed-columns.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Creating Computed Columns","description":"How to create computed columns in BIRT Studio using the custom functions provided.","sidebar_position":1},"sidebar":"birtStudioSidebar","previous":{"title":"Advanced Reporting","permalink":"/birt-docs/docs/birt-studio/advanced/"},"next":{"title":"Creating Summary Tables","permalink":"/birt-docs/docs/birt-studio/advanced/creating-summary-tables"}}');var s=n(4848),r=n(8453);const i=JSON.parse('{"ABS":{"name":"ABS","description":"Returns the absolute value of a number without regard to its sign.","syntax":"ABS(number)","args":{"name":"number","description":"A numeric expression.","typesAllowed":"number"},"returnType":"number","returnDesc":"A number that represents the absolute value of num"},"ADD_DAY":{"name":"ADD_DAY","description":"Returns a date that is a specified number of days from a given date.","syntax":"ADD_DAY(date, daysToAdd)","args":[{"name":"date","description":"A date expression.","typesAllowed":"date"},{"name":"daysToAdd","description":"A numeric expression.","typesAllowed":"number"}],"returnType":"date","returnDesc":"The date value that results from adding the specified number of days to the start date"},"ADD_HOUR":{"name":"ADD_HOUR","description":"Returns a date that is a specified number of hours from a given date.","syntax":"ADD_HOUR(date, hoursToAdd)","args":[{"name":"date","description":"The date or date expression that represents the start date. If a start date does not have a time value, the function assumes the time is midnight, 12:00 AM.","typesAllowed":"date"},{"name":"hoursToAdd","description":"The number of hours to add to the start date. If you specify a negative number, the result appears to subtract the number from the start date","typesAllowed":"number"}],"returnType":"datetime","returnDesc":"The date and time value that results from adding the specified number of hours to the start date"},"ADD_MINUTE":{"name":"ADD_MINUTE","description":"Returns a date that is a specified number of minutes from a given date.","syntax":"ADD_MINUTE(date, minutesToAdd)","args":[{"name":"date","description":"The date or date expression that represents the start date. If a start date does not have a time value, the function assumes the time is midnight, 12:00 AM.","typesAllowed":"date"},{"name":"minutesToAdd","description":"The number of minutes to add to the start date. If you specify a negative number, the result appears to subtract the number from the start date","typesAllowed":"number"}],"returnType":"datetime","returnDesc":"The date and time value that results from adding the specified number of minutes to the start date"},"ADD_MONTH":{"name":"ADD_MONTH","description":"Returns a date that is a specified number of months from a given date.","syntax":"ADD_MONTH(date, monthsToAdd)","args":[{"name":"date","description":"The date or date expression that represents the start date","typesAllowed":"date"},{"name":"monthsToAdd","description":"The number of months to add to the start date. If you specify a negative number, the result appears to subtract the number from the start date","typesAllowed":"number"}],"returnType":"date","returnDesc":"The date value that results from adding the specified number of months to the start date"},"ADD_QUARTER":{"name":"ADD_QUARTER","description":"Returns a date that is a specified number of quarters from a given date.","syntax":"ADD_QUARTER(date, quartersToAdd)","args":[{"name":"date","description":"The date or date expression that represents the start date","typesAllowed":"date"},{"name":"quartersToAdd","description":"The number of quarters to add to the start date. If you specify a negative number, the result appears to subtract the number from the start date","typesAllowed":"number"}],"returnType":"date","returnDesc":"The date value that results from adding the specified number of quarters to the start date"},"ADD_SECOND":{"name":"ADD_SECOND","description":"Returns a date that is a specified number of seconds from a given date.","syntax":"ADD_SECOND(date, secondsToAdd)","args":[{"name":"date","description":"The date or date expression that represents the start date","typesAllowed":"date"},{"name":"secondsToAdd","description":"The number of seconds to add to the start date. If you specify a negative number, the result appears to subtract the number from the start date","typesAllowed":"number"}],"returnType":"datetime","returnDesc":"The date and time value that results from adding the specified number of seconds to the start date"},"ADD_WEEK":{"name":"ADD_WEEK","description":"Returns a date that is a specified number of weeks from a given date.","syntax":"ADD_WEEK(date, weeksToAdd)","args":[{"name":"date","description":"The date or date expression that represents the start date","typesAllowed":"date"},{"name":"weeksToAdd","description":"The number of weeks to add to the start date. If you specify a negative number, the result appears to subtract the number from the start date","typesAllowed":"number"}],"returnType":"date","returnDesc":"The date value that results from adding the specified number of weeks to the start date"},"ADD_YEAR":{"name":"ADD_YEAR","description":"Returns a date that is a specified number of years from a given date.","syntax":"ADD_YEAR(date, yearsToAdd)","args":[{"name":"date","description":"The date or date expression that represents the start date","typesAllowed":"date"},{"name":"yearsToAdd","description":"The number of years to add to the start date. If you specify a negative number, the result appears to subtract the number from the start date","typesAllowed":"number"}],"returnType":"date","returnDesc":"The date value that results from adding the specified number of years to the start date"},"BETWEEN":{"name":"BETWEEN","description":"Tests if a value is between two specified values","syntax":"BETWEEN(value, upperBound, lowerBound)","args":[{"name":"value","description":"The value to test. The value can be a string, numeric, or date value.","typesAllowed":["string","number","date"]},{"name":"upperBound","description":"The first value in the range of values to which to compare. String and date values must be enclosed in double quotation marks (\\" \\")","typesAllowed":"number"},{"name":"lowerBound","description":"The second value in the range of values to which to compare. String and date values must be enclosed in double quotation marks (\\" \\")","typesAllowed":"number"}],"returnType":"boolean","returnDesc":"True if the value is between the upper and lower bounds, false otherwise"},"CEILING":{"name":"CEILING","description":"Returns the smallest integer greater than or equal to a number.","syntax":"CEILING(number, significance)","args":[{"name":"number","description":"The numeric value to round up","typesAllowed":"number"},{"name":"significance","description":"The multiple to which to round.","typesAllowed":"number"}],"returnType":"number","returnDesc":"The smallest integer greater than or equal to the number"},"DAY":{"name":"DAY","description":"Returns a number from 1 to 31 that represents the day of the month","syntax":"DAY(date)","args":{"name":"date","description":"A date expression.","typesAllowed":"date"},"returnType":"number","returnDesc":"The number of the day of the month for the specified date value"},"DIFF_DAY":{"name":"DIFF_DAY","description":"Calculates the number of days between two date values","syntax":"DIFF_DAY(date1, date2)","args":[{"name":"date1","description":"The first date value","typesAllowed":"date"},{"name":"date2","description":"The second date value","typesAllowed":"date"}],"returnType":"number","returnDesc":"The number of days between the two date values"},"DIFF_HOUR":{"name":"DIFF_HOUR","description":"Calculates the number of hours between two date values","syntax":"DIFF_HOUR(date1, date2)","args":[{"name":"date1","description":"The first date value. If the date does not have a time value, the function assumes the time is midnight, 12:00 AM.","typesAllowed":"date"},{"name":"date2","description":"The second date value. If the date does not have a time value, the function assumes the time is midnight, 12:00 AM.","typesAllowed":"date"}],"returnType":"number","returnDesc":"The number of hours between the two date values"},"DIFF_MINUTE":{"name":"DIFF_MINUTE","description":"Calculates the number of minutes between two date values","syntax":"DIFF_MINUTE(date1, date2)","args":[{"name":"date1","description":"The first date value. If the date does not have a time value, the function assumes the time is midnight, 12:00 AM.","typesAllowed":"date"},{"name":"date2","description":"The second date value. If the date does not have a time value, the function assumes the time is midnight, 12:00 AM.","typesAllowed":"date"}],"returnType":"number","returnDesc":"The number of minutes between the two date values"},"DIFF_MONTH":{"name":"DIFF_MONTH","description":"Calculates the number of months between two date values","syntax":"DIFF_MONTH(date1, date2)","args":[{"name":"date1","description":"The first date value","typesAllowed":"date"},{"name":"date2","description":"The second date value","typesAllowed":"date"}],"returnType":"number","returnDesc":"The number of months between the two date values. The function calculates the difference by subtracting the month number of `date1` from the month number of `date2`"},"DIFF_QUARTER":{"name":"DIFF_QUARTER","description":"Calculates the number of quarters between two date values","syntax":"DIFF_QUARTER(date1, date2)","args":[{"name":"date1","description":"The first date value","typesAllowed":"date"},{"name":"date2","description":"The second date value","typesAllowed":"date"}],"returnType":"number","returnDesc":"The number of quarters between `date1` and `date2`"},"DIFF_SECOND":{"name":"DIFF_SECOND","description":"Calculates the number of seconds between two date values","syntax":"DIFF_SECOND(date1, date2)","args":[{"name":"date1","description":"The first date value","typesAllowed":"date"},{"name":"date2","description":"The second date value","typesAllowed":"date"}],"returnType":"number","returnDesc":"The number of seconds between `date1` and `date2`"},"DIFF_WEEK":{"name":"DIFF_WEEK","description":"Calculates the number of weeks between two date values","syntax":"DIFF_WEEK(date1, date2)","args":[{"name":"date1","description":"The first date value","typesAllowed":"date"},{"name":"date2","description":"The second date value","typesAllowed":"date"}],"returnType":"number","returnDesc":"The number of weeks between `date1` and `date2`"},"DIFF_YEAR":{"name":"DIFF_YEAR","description":"Calculates the number of years between two date values","syntax":"DIFF_YEAR(date1, date2)","args":[{"name":"date1","description":"The first date value","typesAllowed":"date"},{"name":"date2","description":"The second date value","typesAllowed":"date"}],"returnType":"number","returnDesc":"The number of years between `date1` and `date2`"},"FIND":{"name":"FIND","description":"Finds the location of a substring in a string","syntax":"FIND(strToFind, str, startPosition?)","args":[{"name":"strToFind","description":"The substring to search for. The search is case-sensitive","typesAllowed":"string"},{"name":"str","description":"The string in which to search","typesAllowed":"string"},{"name":"startPosition","description":"The position in `str` where the search starts","typesAllowed":"number","isOptional":true}],"returnType":"number","returnDesc":"The numberical position of the substring in the string"},"IF":{"name":"IF","description":"Returns one value if a specified condition evaluates to TRUE, or another value if the condition evaluates to FALSE","syntax":"IF(condition, doIfTrue, doIfFalse)","args":[{"name":"condition","description":"The condition to test","typesAllowed":"string"},{"name":"doIfTrue","description":"The value to return if the condition evaluates to TRUE. The value can be a BIRT Expression that evaluates to any of the following in \\"Types Allowed\\"","typesAllowed":["number","date","datetime","time","string","boolean"]},{"name":"doIfFalse","description":"The value to return if the condition evaluates to FALSE. The value can be a BIRT Expression that evaluates to any of the following in \\"Types Allowed\\"","typesAllowed":["number","date","datetime","time","string","boolean"]}],"returnType":"N/A","returnDesc":"Returns the `doIfTrue` value if condition is TRUE or the `doIfFalse` value if the condition is FALSE"},"IN":{"name":"IN","description":"Tests if a value is equal to a value in a list","syntax":"IN(value, check1, ..., checkN)","args":[{"name":"value","description":"The value to test. The value can be a string, numeric, or date value","typesAllowed":["string","number","date","datetime"]},{"name":"check1, ..., checkN","description":"The value or values to which to compare. Can add as many checks as needed.","typesAllowed":["string","number","date","datetime"]}],"returnType":"boolean","returnDesc":"Returns TRUE if value is equal"},"ISNULL":{"name":"ISNULL","description":"Tests if a value in a specified data field is a null value. A null value means that no value exists","syntax":"ISNULL(value)","args":{"name":"value","description":"The data field in which to check for null values","typesAllowed":"field"},"returnType":"boolean","returnDesc":"Returns TRUE if a value in the specified data field is null. Returns FALSE otherwise."},"LEFT":{"name":"LEFT","description":"Extracts a substring from a string, starting from the left-most, or first, character","syntax":"LEFT(str, n?)","args":[{"name":"str","description":"The string from which to extract a substring","typesAllowed":"string"},{"name":"n","description":"The number of characters to extract, starting from the first character","typesAllowed":"number","isOptional":true}],"returnType":"string","returnDesc":"A substring of a specified length","returnNotes":["If you omit `n`, the number of characters to extract, the function returns the first character only","If `n` is zero, the function returns an empty string","If `n` is greater than the length of the string, the function returns the entire string"]},"LEN":{"name":"LEN","description":"Counts the number of characters in a string","syntax":"LEN(str)","args":{"name":"str","description":"The string expression to evaluate","typesAllowed":"string"},"returnType":"number","returnDesc":"The number of characters in a specified string"},"LIKE":{"name":"LIKE","description":"Tests if a string matches a pattern","syntax":"LIKE(str, pattern)","args":[{"name":"str","description":"The string to evaluate","typesAllowed":"string"},{"name":"pattern","description":"The string pattern to match. You must enclose the pattern in double quotation marks (\\" \\"). The match is case-sensitive. The pattern does not support full regex. Characters supported are a percent character (%) and an underscore (_).","typesAllowed":"string"}],"returnType":"boolean","returnDesc":"TRUE if the string matches the pattern. Otherwise FALSE."},"LOWER":{"name":"LOWER","description":"Converts all letters in a string to lowercase","syntax":"LOWER(str)","args":{"name":"str","description":"The string to convert to lowercase","typesAllowed":"string"},"returnType":"string","returnDesc":"The string converted to lowercase"},"MATCH":{"name":"MATCH","description":"Returns a boolean indicating whether a pattern exists within a string","syntax":"MATCH(str, pattern)","args":[{"name":"str","description":"The string to evaluate","typesAllowed":"string"},{"name":"pattern","description":"The string pattern to match. The pattern uses ECMAScript (Javascript) syntax, as defined in Section 15.10 of Standard ECMA-262.","typesAllowed":"string"}],"returnType":"boolean","returnDesc":"TRUE if the string matches the pattern. Otherwise FALSE."},"MOD":{"name":"MOD","description":"Returns the modulo value for a number and divisor","syntax":"MOD(number, divisor)","args":[{"name":"number","description":"The numeric value to divide","typesAllowed":"number"},{"name":"divisor","description":"The numeric value to divide by","typesAllowed":"number"}],"returnType":"number","returnDesc":"The remainder value of number divided by divisor"},"MONTH":{"name":"MONTH","description":"Returns the month for a specified date value","syntax":"MONTH(date, option?)","args":[{"name":"date","description":"The date value from which to extract the month","typesAllowed":"date"},{"name":"option","description":"An optional parameter that specifies the format of the month. If you do not specify a format, the function returns the month as a number from 1 to 12","typesAllowed":"string","notes":["1 to get the month as a number from 1 to 12","2 to get the full month name. The result is locale-specific","3 to get the abbreviated month name. The result is locale-specific"],"isOptional":true}],"returnType":["number","string"],"returnDesc":"The month of the specified date value"},"NOT":{"name":"NOT","description":"Negates a boolean expression","syntax":"NOT(expression)","args":{"name":"expression","description":"The boolean value or expression to negate","typesAllowed":"boolean"},"returnType":"boolean","returnDesc":"TRUE if the expression evaluates to FALSE, and FALSE if the expression evaluates to TRUE"},"NOTNULL":{"name":"NOTNULL","description":"Tests if a value in a specified data field is a non-null value","syntax":"NOTNULL(value)","args":{"name":"value","description":"The data field in which to check for non-null values","typesAllowed":"field"},"returnType":"boolean","returnDesc":"Returns TRUE if a value in the specified data field is not null. Returns FALSE otherwise."},"NOW":{"name":"NOW","description":"Returns the current date and time","syntax":"NOW()","args":null,"returnType":"datetime","returnDesc":"The current date and time"},"QUARTER":{"name":"QUARTER","description":"Returns the quarter number for a specified date value","syntax":"QUARTER(date)","args":{"name":"date","description":"The date value from which to extract the quarter","typesAllowed":"date"},"returnType":"number","returnDesc":"A number from 1 to 4 that represents the quarter for a specified date value"},"RIGHT":{"name":"RIGHT","description":"Extracts a substring from a string, starting from the right-most, or last, character","syntax":"RIGHT(str, n?)","args":[{"name":"str","description":"The string from which to extract a substring","typesAllowed":"string"},{"name":"n","description":"The number of characters to extract, starting from the last character","typesAllowed":"number","isOptional":true}],"returnType":"string","returnDesc":"A substring of a specified length"},"ROUND":{"name":"ROUND","description":"Rounds a number to a specified number of decimal places","syntax":"ROUND(number, decimalPlaces?)","args":[{"name":"number","description":"The numeric value to round","typesAllowed":"number"},{"name":"decimalPlaces","description":"The number of decimal places to round to","typesAllowed":"number","isOptional":true}],"returnType":"number","returnDesc":"A number rounded to a specified number of digits"},"ROUNDDOWN":{"name":"ROUNDDOWN","description":"Rounds a number down to a specified number of decimal places","syntax":"ROUNDDOWN(number, decimalPlaces?)","args":[{"name":"number","description":"The numeric value to round","typesAllowed":"number"},{"name":"decimalPlaces","description":"The number of decimal places to round to. If omitted, assumes 0.","typesAllowed":"number","isOptional":true}],"returnType":"number","returnDesc":"A number rounded down to a specified number of digits"},"ROUNDUP":{"name":"ROUNDUP","description":"Rounds a number up to a specified number of decimal places","syntax":"ROUNDUP(number, decimalPlaces?)","args":[{"name":"number","description":"The numeric value to round","typesAllowed":"number"},{"name":"decimalPlaces","description":"The number of decimal places to round to. If omitted, assumes 0.","typesAllowed":"number","isOptional":true}],"returnType":"number","returnDesc":"A number rounded up to a specified number of digits"},"SEARCH":{"name":"SEARCH","description":"Finds the location of a substring in a string. The substring can contain wildcard characters","syntax":"SEARCH(strToFind, str, startPosition?)","args":[{"name":"strToFind","description":"The substring to search for. The search is case-sensitive","typesAllowed":"string"},{"name":"str","description":"The string in which to search","typesAllowed":"string"},{"name":"startPosition","description":"The position in `str` where the search starts","typesAllowed":"number","isOptional":true}],"returnType":"number","returnDesc":"The numberical position of the substring in the string. The first character of a string starts at 1. If the substring is not found, the function returns 0."},"SQRT":{"name":"SQRT","description":"Returns the square root of a number","syntax":"SQRT(number)","args":{"name":"number","description":"The numeric value to find the square root of","typesAllowed":"number"},"returnType":"number","returnDesc":"The square root of the specified number"},"TODAY":{"name":"TODAY","description":"Returns the current date that includes a time value of midnight, 12:00 AM","syntax":"TODAY()","args":null,"returnType":"date","returnDesc":"The current date in the format MMM dd, yyyy 12:00 AM"},"TRIM":{"name":"TRIM","description":"Removes leading and trailing spaces from a string. Does not remove black characters between words","syntax":"TRIM(str)","args":{"name":"str","description":"The string to remove leading and trailing spaces from","typesAllowed":"string"},"returnType":"string","returnDesc":"The string with leading and trailing spaces removed"},"TRIMLEFT":{"name":"TRIMLEFT","description":"Removes leading spaces from a string","syntax":"TRIMLEFT(str)","args":{"name":"str","description":"The string to remove leading spaces from","typesAllowed":"string"},"returnType":"string","returnDesc":"The string with leading spaces removed"},"TRIMRIGHT":{"name":"TRIMRIGHT","description":"Removes trailing spaces from a string","syntax":"TRIMRIGHT(str)","args":{"name":"str","description":"The string to remove trailing spaces from","typesAllowed":"string"},"returnType":"string","returnDesc":"The string with trailing spaces removed"},"UPPER":{"name":"UPPER","description":"Converts all letters in a string to uppercase","syntax":"UPPER(str)","args":{"name":"str","description":"The string to convert to uppercase","typesAllowed":"string"},"returnType":"string","returnDesc":"The string converted to uppercase"},"WEEK":{"name":"WEEK","description":"Returns a number from 1 to 52 that represents the week of the year","syntax":"WEEK(date)","args":{"name":"date","description":"The date or date expression whose week of the year to get","typesAllowed":"date"},"returnType":"number","returnDesc":"The week of the year for the specified date value"},"WEEKDAY":{"name":"WEEKDAY","description":"Returns the day of the week for a specified date value","syntax":"WEEKDAY(date, option?)","args":[{"name":"date","description":"The date value from which to extract the day of the week","typesAllowed":"date"},{"name":"option","description":"An optional parameter that specifies the format of the day of the week. If you do not specify a format, the function returns the day of the week as a number from 1 to 7","typesAllowed":"string","notes":["1 to get the day as a number from 1 (Sunday) to 7 (Saturday)","2 to get the day as a number from 1 (Monday) to 7 (Sunday)","3 to get the day as a number from 0 (Monday) to 6 (Sunday)","4 to get the full weekday name. The result is locale-specific","5 to get the abbreviated weekday name. The result is locale-specific"],"isOptional":true}],"returnType":["number","string"],"returnDesc":"The day of the week for the specified date value"},"YEAR":{"name":"YEAR","description":"Returns the four digit year value for a specified date value","syntax":"YEAR(date)","args":{"name":"date","description":"The date value from which to extract the year","typesAllowed":"date"},"returnType":"number","returnDesc":"The number that represents the year for the specified date value"}}'),o={};const d=function(){const e=Object.entries(i).map((e=>{let[t,n]=e;return{name:t,...n}})),t=e=>e.args?Array.isArray(e.args)?(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{className:"text--bold",children:"Arguments"}),(0,s.jsx)("ul",{children:e.args.map((e=>(0,s.jsxs)("li",{className:"row row--no-gutters",children:[(0,s.jsx)("p",{className:"text--bold col col--3",children:e.name}),(0,s.jsx)("p",{className:"col col--6",children:e.description}),e.notes&&(0,s.jsx)("ul",{children:e.notes.map(((e,t)=>(0,s.jsx)("li",{children:e},t)))})]},e.name)))})]}):(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{className:"text--bold",children:"Arguments"}),(0,s.jsxs)("div",{className:"row row--no-gutters",children:[(0,s.jsx)("p",{className:"text--bold col col--3",children:e.args.name}),(0,s.jsx)("p",{className:"col col--6",children:e.args.description}),e.args.notes&&(0,s.jsx)("ul",{children:e.args.notes.map(((e,t)=>(0,s.jsx)("li",{children:e},t)))})]})]}):(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{className:"text--bold",children:"Arguments"}),(0,s.jsx)("p",{children:"None"})]}),n=e=>e.returnDesc?(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:"margin-bottom--xl",children:[(0,s.jsx)("p",{className:"text--bold",children:"Returns"}),(0,s.jsx)("p",{children:e.returnDesc}),e.returnNotes&&(0,s.jsx)("ul",{children:e.returnNotes.map(((e,t)=>(0,s.jsx)("li",{children:e},t)))})]})}):(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{className:"text--bold",children:"Returns"}),(0,s.jsx)("p",{children:"None"})]});return(0,s.jsx)("div",{className:"birt-function-list",children:e.map((e=>(0,s.jsxs)("section",{children:[(0,s.jsx)("h3",{children:e.name}),(0,s.jsxs)("div",{id:`${e.name}-container`,children:[(0,s.jsx)("p",{children:e.description}),(0,s.jsx)("p",{className:"text--bold",children:"Syntax"}),(0,s.jsx)("code",{className:o.code,children:(0,s.jsx)("pre",{children:e.syntax})}),t(e),n(e)]})]},e.name)))})},u={title:"Creating Computed Columns",description:"How to create computed columns in BIRT Studio using the custom functions provided.",sidebar_position:1},l=void 0,c={},m=[{value:"What are Computed Columns?",id:"what-are-computed-columns",level:2},{value:"Creating a Computed Column",id:"creating-a-computed-column",level:2},{value:"BIRT Studio Functions",id:"birt-studio-functions",level:2}];function h(e){const t={a:"a",admonition:"admonition",em:"em",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"what-are-computed-columns",children:"What are Computed Columns?"}),"\n",(0,s.jsxs)(t.p,{children:["Computed Columns in BIRT Studio are columns that are created using the custom functions provided in BIRT Studio. The ",(0,s.jsx)(t.a,{href:"#birt-studio-functions",children:"functions"})," in BIRT Studio are somewhat similar to function calls in a modern programming language such as Python or Javascript where it is written as ",(0,s.jsx)("code",{children:"functionName(arg1, arg2, etc.)"}),". The function is written independently in a text box that is called on"]}),"\n",(0,s.jsx)(t.h2,{id:"creating-a-computed-column",children:"Creating a Computed Column"}),"\n",(0,s.jsxs)(t.p,{children:["To create a computed column in BIRT Studio, right click on a column header and select ",(0,s.jsx)(t.strong,{children:"Column > New Computed Column"}),". This will open the ",(0,s.jsx)(t.em,{children:"New Computed Column"})," window."]}),"\n",(0,s.jsxs)(t.p,{children:["In the ",(0,s.jsx)(t.em,{children:"Column Label"})," field, enter a label for the column. This will be the name that appears in the column header. There is a ",(0,s.jsx)(t.em,{children:"Category"})," dropdown that will allow you to browse the existing function categories mentioned below. Changing this dropdown changes the functions available in the ",(0,s.jsx)(t.em,{children:"Select Function"})," area."]}),"\n",(0,s.jsxs)(t.p,{children:['To enter a custom expression, select "Advanced..." in any category. This shows a previously hidden ',(0,s.jsx)(t.em,{children:"Enter Expression"})," text area. Enter your custom expression here. Click the ",(0,s.jsx)(t.em,{children:"Validate"}),' button to check if the expression is valid. If it is valid, a dialog stating "The expression is valid" will appear. If it is invalid, BIRT Studio will alert you. Click ',(0,s.jsx)(t.strong,{children:"OK"})," to close the dialog. Click ",(0,s.jsx)(t.strong,{children:"Cancel"})," to close the ",(0,s.jsx)(t.em,{children:"New Computed Column"})," window without saving. Click ",(0,s.jsx)(t.strong,{children:"OK"})," in the ",(0,s.jsx)(t.em,{children:"New Computed Column"})," window to save the computed column."]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"If you are creating a computed column that is only being used in another computed column, a good practice is to set the label in camelCase so that it is easy to identify it from other computed columns and is a reminder that it is not being used in the final report."})}),"\n",(0,s.jsx)(t.admonition,{type:"warning",children:(0,s.jsx)(t.p,{children:"Column labels cannot be changed once the computed column has been saved. Make sure you are happy with the label before saving!"})}),"\n",(0,s.jsx)(t.h2,{id:"birt-studio-functions",children:"BIRT Studio Functions"}),"\n",(0,s.jsx)(t.p,{children:"The functions in BIRT Studio are separated into several categories in the UI:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Comparison"}),"\n",(0,s.jsx)(t.li,{children:"Financial"}),"\n",(0,s.jsx)(t.li,{children:"Text"}),"\n",(0,s.jsx)(t.li,{children:"Math"}),"\n",(0,s.jsx)(t.li,{children:"Date & Time"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The functions that appear in the UI when selecting any one of the below categories is not the comprehensive list. There are more functions that are not listed but can still be used to write computed columns. See the full list below. For easier navigation, each function is linked in the Table of Contents."}),"\n",(0,s.jsx)(d,{})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);