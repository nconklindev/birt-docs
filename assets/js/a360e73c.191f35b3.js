"use strict";(self.webpackChunkbirt_docs=self.webpackChunkbirt_docs||[]).push([[975],{2006:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"data-dictionary/P/plan-volume","title":"Plan Volume","description":"The Data Dictionary entry for the Plan Volume entity","source":"@site/docs/data-dictionary/P/plan-volume.mdx","sourceDirName":"data-dictionary/P","slug":"/data-dictionary/plan-volume","permalink":"/docs/data-dictionary/plan-volume","draft":false,"unlisted":false,"editUrl":"https://github.com/nconklindev/birt-docs/edit/main/docs/data-dictionary/P/plan-volume.mdx","tags":[],"version":"current","frontMatter":{"title":"Plan Volume","description":"The Data Dictionary entry for the Plan Volume entity","slug":"/data-dictionary/plan-volume"},"sidebar":"dataDictionarySidebar","previous":{"title":"Plan Volume - Standard Shift","permalink":"/docs/data-dictionary/plan-volume-standard-shift"},"next":{"title":"Posted Schedule","permalink":"/docs/data-dictionary/posted-schedule"}}');var a=i(4848),l=i(8453),r=i(6201);const o={title:"Plan Volume",description:"The Data Dictionary entry for the Plan Volume entity",slug:"/data-dictionary/plan-volume"},s="Plan Volume",d={},c=[{value:"Supported Types",id:"supported-types",level:2},{value:"Data Granularity",id:"data-granularity",level:2},{value:"Columns",id:"columns",level:2},{value:"Related Entities",id:"related-entities",level:2},{value:"Core Entity",id:"core-entity",level:2},{value:"Relationship",id:"relationship",level:2}];function p(e){const t={h1:"h1",h2:"h2",header:"header",...(0,l.R)(),...e.components},{ColumnsTable:i,CoreEntityTable:n,RelatedEntitiesList:o,RelationshipTable:s,SupportedTypesTable:d}=t;return i||h("ColumnsTable",!0),n||h("CoreEntityTable",!0),o||h("RelatedEntitiesList",!0),s||h("RelationshipTable",!0),d||h("SupportedTypesTable",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"plan-volume",children:"Plan Volume"})}),"\n","\n",Array.isArray(r.QZD.h_)?r.QZD.h_.map(((e,t)=>(0,a.jsx)("p",{children:e},t))):r.QZD.h_.split("\n").map(((e,t)=>(0,a.jsx)("p",{children:e},t))),"\n",(0,a.jsx)(t.h2,{id:"supported-types",children:"Supported Types"}),"\n",(0,a.jsx)(d,{supportedTypes:r.QZD.mz}),"\n",(0,a.jsx)(t.h2,{id:"data-granularity",children:"Data Granularity"}),"\n",r.QZD.tB,"\n",(0,a.jsx)(t.h2,{id:"columns",children:"Columns"}),"\n",(0,a.jsx)(i,{columns:r.QZD.YB}),"\n",(0,a.jsx)(t.h2,{id:"related-entities",children:"Related Entities"}),"\n",(0,a.jsx)(o,{relatedEntities:r.QZD.fw}),"\n",(0,a.jsx)(t.h2,{id:"core-entity",children:"Core Entity"}),"\n",(0,a.jsx)(n,{coreEntities:r.QZD.Zw}),"\n",(0,a.jsx)(t.h2,{id:"relationship",children:"Relationship"}),"\n",(0,a.jsx)(s,{relationship:r.QZD.dL,simple:!0}),"\n",r.QZD.Ut&&(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h2",{children:"Additional Information"}),Array.isArray(r.QZD.Ut)?r.QZD.Ut.map(((e,t)=>(0,a.jsx)("p",{children:e},t))):(0,a.jsx)("p",{children:r.QZD.Ut})]})]})}function u(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}function h(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);